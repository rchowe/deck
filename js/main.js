// Generated by CoffeeScript 1.8.0
(function() {
  var cards, is_with_replacement, requirements, shoe, shuffle, update_options,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  cards = null;

  window.shoe = [];

  shoe = window.shoe;

  requirements = {};

  update_options = function() {
    ' Update settings for the configuration panel. ';
    var card, id, ids, index, key, keys, out, req, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _results;
    for (index = _i = 0, _len = cards.length; _i < _len; index = ++_i) {
      card = cards[index];
      if (!('requirements' in card)) {
        continue;
      }
      _ref = card.requirements;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        req = _ref[_j];
        if (__indexOf.call(requirements, req) < 0) {
          requirements[req] = [];
        }
        requirements[req].push(index);
      }
    }
    keys = (function() {
      var _results;
      _results = [];
      for (req in requirements) {
        _results.push(req);
      }
      return _results;
    })();
    keys.sort();
    _results = [];
    for (_k = 0, _len2 = keys.length; _k < _len2; _k++) {
      key = keys[_k];
      out = '<ul class = "cards-affected">';
      ids = requirements[key];
      for (_l = 0, _len3 = ids.length; _l < _len3; _l++) {
        id = ids[_l];
        out += '<li>' + cards[id].title + '</li>';
      }
      out += '</ul>';
      _results.push($('#card-options').append("<label class = 'checkbox inline'><input type = 'checkbox' checked = 'true' id = '" + key + "'/>" + key + "<div class = 'help-block'>" + out + "</div></label>"));
    }
    return _results;
  };

  window.draw_card = function() {
    ' Draw a card, triggered when the user presses the draw card button. ';
    var card, dt, e, index, req, text, x, xhr, _, _i, _len, _ref;
    if (cards == null) {
      xhr = new XMLHttpRequest;
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          cards = jsyaml.load(xhr.responseText).cards;
          if (cards != null) {
            update_options();
            return draw_card();
          } else {
            alert('Error loading cards.');
          }
        }
      };
      xhr.open('GET', 'cards.yaml', true);
      xhr.send();
      return;
    }
    if (shoe.length === 0) {
      try {
        dt = ((new Date()) - (new Date(localStorage.getItem('shoe_date')))) / 1000.0;
        if (dt < 60 * 60 * 24) {
          console.log('Loading shoe from local storage (HTML5).');
          shoe = (function() {
            var _i, _len, _ref, _results;
            _ref = localStorage.getItem('shoe').split(' ');
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _results.push(parseInt(x));
            }
            return _results;
          })();
        } else {
          shoe = (function() {
            var _i, _len, _results;
            _results = [];
            for (index = _i = 0, _len = cards.length; _i < _len; index = ++_i) {
              _ = cards[index];
              _results.push(index);
            }
            return _results;
          })();
        }
      } catch (_error) {
        shoe = (function() {
          var _i, _len, _results;
          _results = [];
          for (index = _i = 0, _len = cards.length; _i < _len; index = ++_i) {
            _ = cards[index];
            _results.push(index);
          }
          return _results;
        })();
      }
    }
    shoe = shuffle(shoe);
    index = 0;
    if (is_with_replacement()) {
      index = shoe[0];
    } else {
      while (true) {
        index = shoe.pop();
        if ('requirements' in cards[index]) {
          _ref = cards[index].requirements;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            req = _ref[_i];
            e = document.getElementById(req);
            if ((e != null) && !e.checked) {
              continue;
            }
          }
        }
        break;
      }
    }
    try {
      localStorage.setItem('shoe', shoe.join(' '));
      localStorage.setItem('shoe_date', new Date().toString());
    } catch (_error) {
      console.warn('Local Storage Error');
    }
    card = cards[index];
    $('#card-title').html(card.title);
    text = card.text;
    text.replace('\n', '<br/>');
    $('#card-text').html(text);
    if ('flavor_text' in card) {
      return $('#card-flavor-text').html(card.flavor_text);
    } else {
      console.log('No Flavor Text');
      return $('#card-flavor-text').html('');
    }
  };

  is_with_replacement = function() {
    ' Gets the configuration setting specifying whether to draw cards with replacement or not. ';
    return $('input[name="draw-style"]:checked').val() === 'replacement';
  };

  shuffle = function(array) {
    ' Shuffles an array in-place. ';
    var index, rIndex, temp;
    index = array.length;
    while (index !== 0) {
      rIndex = Math.floor(Math.random() * index);
      index -= 1;
      temp = array[index];
      array[index] = array[rIndex];
      array[rIndex] = temp;
    }
    return array;
  };

}).call(this);
